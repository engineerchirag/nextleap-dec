/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var BROWSER_BEAUTIFY_TYPE = hasSymbol ? Symbol.for('browser.beautify.type') : 0xfff;
var BROWSER_BEAUTIFY_INSTANCE = hasSymbol ? Symbol.for('browser.beautify.instance') : 0xffe;

var gray = [
    '#f8f9fa',
    '#ebedf0',
    '#dee0e5',
    '#cfd3d9',
    '#bec4cc',
    '#acb3be',
    '#97a0ae',
    '#7e899a',
    '#626c7d',
    '#393f49'
];
var blue = [
    '#e6effd',
    '#cbddfb',
    '#adcaf8',
    '#88b2f5',
    '#5a94f2',
    '#1467ed',
    '#125cd5',
    '#0f51ba',
    '#0c4299',
    '#092f6c'
];
var indigo = [
    '#edeafd',
    '#d8d4fb',
    '#c1baf9',
    '#a59af7',
    '#7f6ff4',
    '#2d14ed',
    '#2812d5',
    '#230fba',
    '#1d0c99',
    '#14096b'
];
var violet = [
    '#f5eafd',
    '#ebd2fb',
    '#e0b7f9',
    '#d196f6',
    '#be6af3',
    '#9a14ed',
    '#8b12d6',
    '#790fbb',
    '#640d9a',
    '#47096e'
];
var fuchsia = [
    '#fdeafb',
    '#fbd3f7',
    '#f9b9f2',
    '#f799ec',
    '#f36ee4',
    '#ed14d4',
    '#d612bf',
    '#bc0fa8',
    '#9c0d8b',
    '#700965'
];
var pink = [
    '#fdeaf1',
    '#fbd3e3',
    '#f9b9d1',
    '#f799bd',
    '#f36da1',
    '#ed1467',
    '#d6125d',
    '#bc0f51',
    '#9c0d43',
    '#700930'
];
var red = [
    '#fdebe9',
    '#fbd6d1',
    '#f9bdb5',
    '#f69e93',
    '#f37666',
    '#ed2d14',
    '#d62812',
    '#bb230f',
    '#9b1d0d',
    '#6f1509'
];
var orange = [
    '#fcf2e2',
    '#fae5c2',
    '#f7d69f',
    '#f4c578',
    '#f1b14b',
    '#ed9a14',
    '#d68b12',
    '#bc7a0f',
    '#9b650d',
    '#704809'
];
var yellow = [
    '#f9fce1',
    '#f3fac0',
    '#edf79d',
    '#e5f475',
    '#ddf148',
    '#d4ed14',
    '#c0d612',
    '#a8bc0f',
    '#8c9d0d',
    '#667209'
];
var lime = [
    '#edfce4',
    '#dafac6',
    '#c4f8a4',
    '#abf57e',
    '#8df150',
    '#67ed14',
    '#5dd612',
    '#52bc0f',
    '#449d0d',
    '#317109'
];
var green = [
    '#e7fdea',
    '#cdfbd3',
    '#b0f8b8',
    '#8cf698',
    '#5df26f',
    '#14ed2d',
    '#12d628',
    '#0fbc23',
    '#0d9d1d',
    '#097215'
];
var teal = [
    '#e6fdf4',
    '#cbfbe8',
    '#acf8db',
    '#87f5cb',
    '#58f2b7',
    '#14ed9a',
    '#12d68b',
    '#0fbc7a',
    '#0d9d66',
    '#09724a'
];
var cyan = [
    '#e4fafc',
    '#c7f4fa',
    '#a6eef8',
    '#80e7f5',
    '#51dff1',
    '#14d4ed',
    '#12bfd6',
    '#0fa8bc',
    '#0d8c9c',
    '#096571'
];
var color = {
    gray: gray,
    blue: blue,
    indigo: indigo,
    violet: violet,
    fuchsia: fuchsia,
    pink: pink,
    red: red,
    orange: orange,
    yellow: yellow,
    lime: lime,
    green: green,
    teal: teal,
    cyan: cyan
};

var beautify = function (str, config) {
    if (config === undefined) {
        return str;
    }
    else if (typeof config === 'string') {
        var ret = ["%c" + str, config];
        Object.assign(ret, { $$TYPE: BROWSER_BEAUTIFY_TYPE });
        return ret;
    }
    else {
        var behind = Object.entries(config).map(function (_a) {
            var key = _a[0], value = _a[1];
            return key + ": " + value;
        }).join('; ');
        var ret = ["%c" + str, behind];
        Object.assign(ret, { $$TYPE: BROWSER_BEAUTIFY_TYPE });
        return ret;
    }
};
var color$1 = function (str, color) {
    return beautify(str, { color: color });
};
var fontSize = function (str, size) {
    return beautify(str, { 'font-size': size });
};
var backgroundColor = function (str, color) {
    return beautify(str, { 'background-color': color });
};
var colorMap = new Map([
    ['red', red[5]],
    ['gray', gray[5]],
    ['blue', blue[5]],
    ['indigo', indigo[5]],
    ['violet', violet[5]],
    ['fuchsia', fuchsia[5]],
    ['pink', pink[5]],
    ['orange', orange[5]],
    ['yellow', yellow[5]],
    ['lime', lime[5]],
    ['green', green[5]],
    ['teal', teal[5]],
    ['cyan', cyan[5]]
]);
var getColorBeautify = function () {
    var ret = {};
    colorMap.forEach(function (value, key) {
        var _a;
        Object.assign(ret, (_a = {},
            _a[key] = function (str) { return beautify(str, { color: value }); },
            _a));
    });
    return ret;
};

var Instance = /** @class */ (function () {
    function Instance(str) {
        var _this = this;
        this.$$TYPE = BROWSER_BEAUTIFY_INSTANCE;
        this.str = str;
        this.config = {};
        colorMap.forEach(function (value, key) {
            var _a;
            Object.assign(_this, (_a = {},
                _a[key] = function () {
                    Object.assign(_this.config, { color: value });
                    return _this;
                },
                _a));
        });
    }
    Instance.prototype.color = function (color) {
        Object.assign(this.config, { color: color });
        return this;
    };
    Instance.prototype.backgroundColor = function (color) {
        Object.assign(this.config, { 'background-color': color });
        return this;
    };
    Instance.prototype.fontSize = function (size) {
        Object.assign(this.config, { 'font-size': size });
        return this;
    };
    Instance.prototype.para = function (para) {
        Object.assign(this.config, para);
        return this;
    };
    Instance.prototype.output = function (value) {
        if (this.str !== undefined || value !== undefined) {
            return beautify((value || this.str), this.config);
        }
        else {
            throw new Error('没有值');
        }
    };
    return Instance;
}());

var beautify$1 = __assign({ beautify: beautify,
    fontSize: fontSize,
    color: color$1,
    backgroundColor: backgroundColor, createInstance: function (str) { return new Instance(str); } }, getColorBeautify());

var genPara = function (args) {
    var before = '';
    var after = [];
    var other = [];
    args.map(function (arg) {
        if (arg && arg.$$TYPE === BROWSER_BEAUTIFY_TYPE) {
            before = "" + before + arg[0];
            after.push(arg[1]);
        }
        else if (arg && arg.$$TYPE === BROWSER_BEAUTIFY_INSTANCE) {
            var _a = arg.output(), a = _a[0], b = _a[1];
            before = "" + before + a;
            after.push(b);
        }
        else if (typeof arg === 'string') {
            before = before + "%c" + arg;
            after.push('');
        }
        else {
            other.push(arg);
        }
    });
    return __spreadArrays([before], after, other);
};
var genConsole = function (method) {
    var print = console[method];
    return function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        var args = __spreadArrays([message], optionalParams);
        var para = genPara(args);
        print.apply(void 0, para);
    };
};
var genGroupConsole = function (method) {
    var print = console[method];
    return function (groupTitle) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        var args = __spreadArrays([groupTitle], optionalParams);
        var para = genPara(args);
        print.apply(void 0, para);
    };
};
var console$1 = __assign(__assign({}, console), { log: genConsole('log'), info: genConsole('info'), debug: genConsole('debug'), warn: genConsole('warn'), error: genConsole('error'), group: genGroupConsole('group'), groupCollapsed: genGroupConsole('groupCollapsed') });

var index = {
    beautify: beautify$1,
    color: color,
    console: console$1
};

export default index;
